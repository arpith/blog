---
layout: post
date: 2015-12-06 18:57:33 GMT
tags:
- react native
- flux
- ios
- apps
- ios app development
- performance
- faster
- speed
- javascript
- programming
- code
- constellational
title: "Small steps to speed up a React Native app"
---
<p>I’m <a href="http://github.com/constellational">building an app</a> to share notes called <a href="http://constellational.com/">Constellational</a> (<a href="http://eepurl.com/bHN6Mf">sign up!</a>), and a major part of this is displaying posts in a <a href="https://facebook.github.io/react-native/">React Native</a> <a href="https://facebook.github.io/react-native/docs/listview.html">ListView</a>. I made<a href="https://github.com/constellational/iOS/commit/520c6ff76d249f8afd619c28b54e9877eebe0d14"> some small changes</a> today make the app faster.</p><figure data-orig-width="1080" data-orig-height="810" class="tmblr-full"><img src="/images/eacb689636550765f3ae97de5f9f5ad164f7fd0b6541d53c6321465b9748a9d5.png" data-orig-width="1080" data-orig-height="810"></figure><h2>Move stuff out from loops</h2><p>This is <a href="https://github.com/constellational/iOS/blob/466ff6c6d3c622e80299f96b6df97e3f0bf6a087/components/PostsPage.js">the code</a> that gets called when the <a href="https://facebook.github.io/flux/">flux</a> <a href="https://facebook.github.io/flux/docs/overview.html#stores">store</a> changes, it gets the posts and checks if they have <a href="http://arpith.co/post/134069674682/drafts-unpublished-edits-and-posts">unpublished edits </a>saved locally:</p><pre>getAll() {<br> &nbsp;var posts = PostStore.getAll();<br> &nbsp;posts = posts.map((post) =&gt; {<br> &nbsp; &nbsp;var unpublishedEdits = EditStore.get(post.id);<br> &nbsp; &nbsp;if (unpublishedEdits) {<br> &nbsp; &nbsp; &nbsp;post = unpublishedEdits;<br> &nbsp; &nbsp; &nbsp;post.hasUnpublishedEdits = true;<br> &nbsp; &nbsp;}<br> &nbsp; &nbsp;return post;<br> &nbsp;});<br> &nbsp;return posts;<br>}</pre><p>As always, moving stuff out of the loop improved performance:</p><pre>getAll() {<br> &nbsp;var user = PostStore.getUser(this.props.username);<br> &nbsp;var posts = user.posts.map((url) =&gt; {<br> &nbsp; &nbsp;return PostStore.getPost(this.props.username, url));<br> &nbsp;});<br> &nbsp;var edits = EditStore.getAll();<br> &nbsp;posts = posts.map((post) =&gt; {<br> &nbsp; &nbsp;if (edits[post.id]) return edits[post.id];<br> &nbsp; &nbsp;else return post;<br> &nbsp;});<br> &nbsp;return posts;<br>}</pre><p>The function now makes only one request to the EditStore (the flux store that keeps track of unpublished edits). Also note that I’ve changed the way posts are accessed from the PostStore. </p><h2>Run less JavaScript</h2><p>The PostStore’s getAll() used to look like:</p><pre>function getAll(username) {<br> &nbsp;if (!username) username = SettingStore.getUsername();<br> &nbsp;if (!_users) {<br> &nbsp; &nbsp;loadAsyncStore()<br> &nbsp; &nbsp; &nbsp;.then(fetchFromServer)<br> &nbsp; &nbsp; &nbsp;.then(updateAsyncStore)<br> &nbsp; &nbsp; &nbsp;.then(retryFailedRequests);<br> &nbsp; &nbsp;return [];<br> &nbsp;} else if (!_users[username]) {<br> &nbsp; &nbsp;fetchFromServer(username).then(updateAsyncStore);<br> &nbsp; &nbsp;return [];<br> &nbsp;} else {<br> &nbsp; &nbsp;return _users[username].posts.map((url) =&gt; {<br> &nbsp; &nbsp; &nbsp;return _posts[username][url]<br> &nbsp; &nbsp;});<br> &nbsp;}<br>}</pre><p>This has <a href="https://github.com/constellational/iOS/blob/466ff6c6d3c622e80299f96b6df97e3f0bf6a087/stores/PostStore.js">now been replaced with</a>:</p><pre>function getPost(username, postURL) {<br> &nbsp;if (!username) username = SettingStore.getUsername();<br> &nbsp;if (!_posts) {<br> &nbsp; &nbsp;loadAsyncStore();<br> &nbsp;} else if (!_posts[username] || !_posts[username][postURL]) {<br> &nbsp; &nbsp;fetchPost(username, postURL);<br> &nbsp;} else {<br> &nbsp; &nbsp;return _posts[username][postURL];<br> &nbsp;}<br>}</pre><pre>function getUser(username) {<br> &nbsp;if (!username) username = SettingStore.getUsername();<br> &nbsp;if (!_users) {<br> &nbsp; &nbsp;loadAsyncStore().then(() =&gt; fetchUser(username));<br> &nbsp; &nbsp;return {posts: []};<br> &nbsp;} else if (!_users[username]) {<br> &nbsp; &nbsp;fetchUser(username);<br> &nbsp; &nbsp;return {posts: []};<br> &nbsp;} else {<br> &nbsp; &nbsp;return _users[username];<br> &nbsp;}<br>}</pre><p>Why is this faster? When the PostsPage component is loaded a bunch of calls to getAll() were being made — which resulted in fetchFromServer() running several times. This <a href="https://facebook.github.io/react-native/docs/performance.html#javascript-frame-rate">kept the JavaScript thread busy</a> while fetchFromServer() downloaded all the posts. Meanwhile, the <a href="https://facebook.github.io/react-native/docs/performance.html#main-thread-aka-ui-thread-frame-rate">ScrollView worked fine</a> (this is handled on the iOS side of things). There is a noticeable difference now, because fetchFromServer’s replacement only makes a single request. This fixes <a href="https://github.com/constellational/iOS/issues/57">#57</a>.</p><p><a href="https://github.com/constellational/iOS/issues/56">#56</a> is fixed as well, because local storage is updated when a post is fetched.</p>